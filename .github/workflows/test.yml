name: CI/CD Workflow for AppMovilBarbada

on:
  push:
    branches:
      - master
      - Errors
      - Feature
  pull_request:
    types: [opened, closed]
    branches:
      - master

  workflow_dispatch:  # Permite ejecutar el flujo manualmente

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ['16.x']  # Aseg√∫rate de usar la versi√≥n de Node.js compatible con tu proyecto.

    steps:
      # 1. Checkout del c√≥digo
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Cache para dependencias npm
      - name: Cache npm dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: npm-cache-${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            npm-cache-${{ runner.os }}-node-${{ matrix.node-version }}

      # 3. Configuraci√≥n de Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      # 4. Instalaci√≥n de Expo CLI
      - name: Install Expo CLI
        run: npm install --global expo-cli

      # 5. Instalaci√≥n de dependencias
      - name: Install dependencies
        run: npm install
      
        # 7. Pruebas unitarias
      - name: Run tests
        run: echo "Ejecutando pruebas..."
      
        # 6. Linter del c√≥digo
      - name: Lint code with Expo
        run: expo lint --max-warnings=0

  build:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/master'  # Solo ejecuta este job en la rama master
    steps:
      # 1. Checkout del c√≥digo
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Instalaci√≥n de EAS CLI (Expo Application Services)
      - name: Install EAS CLI
        run: npm install -g eas-cli

      # 3. Instalaci√≥n de dependencias
      - name: Install dependencies
        run: npm install

      # 4. Construcci√≥n para Android
      - name: Build APK for Android
        run: npx eas-cli build --platform android --profile preview --non-interactive
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}  # Aseg√∫rate de configurar EXPO_TOKEN en GitHub Secrets.

      # 5. Obtener URL del artefacto y subir imagen
      - name: Upload image and send data to API
        run: |
          # Obtener URL del artefacto
          RESPONSE=$(eas build:list --limit=1 --status=finished --json --non-interactive)
          DOWNLOAD_URL=$(echo "$RESPONSE" | jq -r '.[0].artifacts.buildUrl')

          echo "La URL del artefacto obtenida es: $DOWNLOAD_URL"

          # Verificar si la imagen existe
          if [ ! -f "$IMAGE_PATH" ]; then
            echo "La imagen no existe en la ruta especificada: $IMAGE_PATH"
            exit 1
          fi

          # Obtener solo el nombre del archivo desde la ruta completa
          IMAGE_NAME=$(basename "$IMAGE_PATH")
          echo "El nombre del icono es: $IMAGE_NAME"

          # Subir la imagen al servidor PHP
          curl -X POST \
            -F "imagen=@$IMAGE_PATH" \
            "$WEB_SERVICE_URL"

          # Enviar datos a la API de Express
          curl -X POST "$API_URL" \
            -H "Content-Type: application/json" \
            -d '{
              "url": "'"$DOWNLOAD_URL"'",
              "nombre": "'"$PROJECT_NAME"'",
              "icono": "'"$IMAGE_NAME"'"
            }'

        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
          IMAGE_PATH: ".github/workflows/icono.png"  # Cambia esto a la ruta de tu icono
          WEB_SERVICE_URL: "https://labarbada.store/subirImagen.php"
          API_URL: "https://api-admin-six.vercel.app/api/guardar-datos"  # Cambia por la URL de tu API
          PROJECT_NAME: "LaBarbada"  # Cambia este valor por el nombre de tu proyecto


  notify:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      # Notificaci√≥n de fallo a Slack
      - name: Send Slack notification on failure
        if: failure()
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data '{"text":"üö® CI/CD fall√≥ en la rama ${{ github.ref_name }}. Revisa los detalles aqu√≠: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"}' \
          ${{ secrets.SLACK_WEBHOOK_URL }}

      # Notificaci√≥n de √©xito a Slack
      - name: Send Slack notification on success
        if: success()
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data '{"text":"‚úÖ CI/CD completado exitosamente en la rama ${{ github.ref_name }}. Revisa los detalles aqu√≠: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"}' \
          ${{ secrets.SLACK_WEBHOOK_URL }}

  notify_pr_comment:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      # Agregar comentarios al Pull Request
      - name: Add comment on PR
        uses: actions/github-script@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { context } = require('@actions/github');
            github.issues.createComment({
              issue_number: context.payload.pull_request.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: "üöÄ Pull Request actualizado. Por favor revisa los √∫ltimos cambios."
            })
